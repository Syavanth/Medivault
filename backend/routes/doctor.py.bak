from flask import Blueprint, jsonify, request
from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt
from models import db, User, Doctor, Appointment, PatientAccess, Prescription, MedicineEntry
from datetime import datetime, timedelta, timezone
import json
import logging

logger = logging.getLogger(__name__)

doctor_bp = Blueprint('doctor', __name__)


def _utc_iso(dt: datetime) -> str:
    return dt.astimezone(timezone.utc).isoformat()


def _parse_slot_obj(s):
    if isinstance(s, dict) and 'start' in s and 'end' in s:
        try:
            start = datetime.fromisoformat(s['start']).astimezone(timezone.utc)
            end = datetime.fromisoformat(s['end']).astimezone(timezone.utc)
            return {'start': _utc_iso(start), 'end': _utc_iso(end)}
        except Exception:
            return None
    if isinstance(s, str):
        try:
            start = datetime.fromisoformat(s).astimezone(timezone.utc)
            end = (start + timedelta(hours=1)).astimezone(timezone.utc)
            return {'start': _utc_iso(start), 'end': _utc_iso(end)}
        except Exception:
            return None
    return None


@doctor_bp.route('/eligible-patients', methods=['GET'])
@jwt_required()
def get_eligible_patients():
    try:
        doctor_id = int(get_jwt_identity())
        claims = get_jwt()
        if claims.get('role') != 'Doctor':
            return jsonify({"error": "Unauthorized"}), 403

        appointment_patient_ids = [pid for (pid,) in db.session.query(Appointment.patient_id)
                                   .filter(Appointment.doctor_id == doctor_id)
                                   .distinct()]

        access_entries = PatientAccess.query.filter_by(doctor_id=doctor_id, access_granted=True).all()
        access_patient_ids = [entry.patient_id for entry in access_entries]

        all_patient_ids = set(appointment_patient_ids + access_patient_ids)
        patients = User.query.filter(User.user_id.in_(all_patient_ids)).all() if all_patient_ids else []

        patients_data = [{
            'id': p.user_id,
            'name': p.name,
            'email': p.email
        } for p in patients]

        return jsonify(patients_data)
    except Exception:
        logger.exception("eligible_patients error")
        return jsonify({"error": "Failed to fetch eligible patients"}), 500


@doctor_bp.route('/patients', methods=['GET'])
@jwt_required()
def assigned_patients():
    try:
        doctor_id = int(get_jwt_identity())
        claims = get_jwt()
        if claims.get('role') != 'Doctor':
            return jsonify({'error': 'Unauthorized'}), 403

        access_entries = PatientAccess.query.filter_by(doctor_id=doctor_id, access_granted=True).all()
        access_patient_ids = [entry.patient_id for entry in access_entries]

        appt_patient_ids = [pid for (pid,) in db.session.query(Appointment.patient_id).filter(Appointment.doctor_id == doctor_id).distinct()]

        combined_ids = list(set(access_patient_ids + appt_patient_ids))
        patients = User.query.filter(User.user_id.in_(combined_ids)).all() if combined_ids else []

        patients_data = [{
            'id': p.user_id,
            'name': p.name,
            'email': p.email,
        } for p in patients]

        return jsonify(patients_data)
    except Exception:
        logger.exception("assigned_patients error")
        return jsonify({'error': 'Failed to fetch patients'}), 500


@doctor_bp.route('/availability', methods=['PUT'])
@jwt_required()
def update_availability():
    try:
        doctor_id = int(get_jwt_identity())
        claims = get_jwt()
        if claims.get('role') != 'Doctor':
            return jsonify({'error': 'Unauthorized'}), 403

        data = request.get_json() or {}
        slots = data.get('availability_slots')
        if slots is None:
            return jsonify({'error': 'No availability_slots provided'}), 400

        normalized = []
        for s in slots:
            slot = _parse_slot_obj(s)
            if slot:
                normalized.append(slot)

        doc = db.session.get(Doctor, doctor_id)
        if not doc:
            return jsonify({'error': 'Doctor not found'}), 404

        doc.availability_slots = json.dumps(normalized)
        db.session.commit()
        return jsonify({'message': 'Availability updated', 'slots_count': len(normalized)}), 200
    except Exception:
        db.session.rollback()
        logger.exception("update_availability error")
        return jsonify({'error': 'Failed to update availability'}), 500


@doctor_bp.route('/availability/default', methods=['PUT'])
@jwt_required()
def populate_default_availability():
    try:
        doctor_id = int(get_jwt_identity())
        claims = get_jwt()
        if claims.get('role') != 'Doctor':
            return jsonify({'error': 'Unauthorized'}), 403

        data = request.get_json() or {}
        days = int(data.get('days', 7))
        if days <= 0:
            days = 7

        base = datetime.now(timezone.utc)
        slots = []
        for d in range(days):
            day = base + timedelta(days=d)
            for hour in range(10, 19):
                start_dt = datetime(year=day.year, month=day.month, day=day.day, hour=hour, minute=0, second=0, tzinfo=timezone.utc)
                end_dt = start_dt + timedelta(hours=1)
                slots.append({'start': _utc_iso(start_dt), 'end': _utc_iso(end_dt)})

        doc = db.session.get(Doctor, doctor_id)
        if not doc:
            return jsonify({'error': 'Doctor not found'}), 404

        doc.availability_slots = json.dumps(slots)
        db.session.commit()
        return jsonify({'message': 'Default availability populated', 'slots_count': len(slots)}), 200
    except Exception:
        db.session.rollback()
        logger.exception("populate_default_availability error")
        return jsonify({'error': 'Failed to populate default availability'}), 500


@doctor_bp.route('/prescriptions', methods=['POST'])
@jwt_required()
def create_prescription():
    doctor_id = int(get_jwt_identity())
    claims = get_jwt()
    if claims.get('role') != 'Doctor':
        return jsonify({"error": "Unauthorized"}), 403

    try:
        data = request.get_json() or {}
        patient_id = data.get('patient_id') or data.get('patientId') or data.get('patient')
        diagnosis = data.get('diagnosis') or data.get('diagnosis_text') or ''
        medicines = data.get('medicines') or data.get('medicine_list') or []

        patient = db.session.get(User, patient_id)
        if not patient or getattr(patient, 'role', None) != 'Patient':
            return jsonify({"error": "Patient not found"}), 404

        appointment = db.session.query(Appointment).filter_by(doctor_id=doctor_id, patient_id=patient_id).first()
        if not appointment:
            return jsonify({"error": "Patient has not had an appointment with this doctor"}), 400

        prescription = Prescription(
            patient_id=patient_id,
            doctor_id=doctor_id,
            diagnosis=diagnosis,
            date_issued=datetime.now(timezone.utc).date()
        )
        db.session.add(prescription)
        db.session.flush()

        for medicine in medicines:
            name = medicine.get('name') or medicine.get('medicine') or medicine.get('med_name')
            dosage = medicine.get('dosage') or medicine.get('dose') or ''
            frequency = medicine.get('frequency') or medicine.get('freq') or ''
            timing = medicine.get('timing') or medicine.get('instructions') or ''
            if not name:
                continue
            me = MedicineEntry(
                prescription_id=prescription.prescription_id,
                name=name,
                dosage=dosage,
                frequency=frequency,
                timing=timing
            )
            db.session.add(me)

        db.session.commit()
        return jsonify({"message": "Prescription created successfully", "prescription_id": prescription.prescription_id}), 201

    except Exception:
        db.session.rollback()
        logger.exception("create_prescription error")
        return jsonify({"error": "Failed to create prescription"}), 500


@doctor_bp.route('/prescriptions/<int:prescription_id>', methods=['DELETE'])
@jwt_required()
def delete_prescription(prescription_id):
    try:
        doctor_id = int(get_jwt_identity())
        claims = get_jwt()
        if claims.get('role') != 'Doctor':
            return jsonify({'error': 'Unauthorized'}), 403

        pres = db.session.get(Prescription, prescription_id)
        if not pres:
            return jsonify({'error': 'Prescription not found'}), 404

        if pres.doctor_id != doctor_id:
            return jsonify({'error': 'Forbidden'}), 403

        MedicineEntry.query.filter_by(prescription_id=prescription_id).delete()
        db.session.delete(pres)
        db.session.commit()
        return jsonify({'message': 'Prescription deleted successfully'}), 200

    except Exception:
        db.session.rollback()
        logger.exception("delete_prescription error")
        return jsonify({'error': 'Failed to delete prescription'}), 500
